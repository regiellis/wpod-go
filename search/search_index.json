{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WPOD: WordPress in Docker","text":"<p>WPOD is a modern CLI tool for managing local WordPress environments using Docker. This documentation covers all major commands, workflows, troubleshooting, and best practices for using WPOD in real-world development.</p>"},{"location":"#what-is-wpod","title":"What is WPOD?","text":"<p>WPOD lets you create, manage, and destroy fully isolated WordPress stacks on your local machine. Each instance includes WordPress, MySQL, Adminer, Mailpit, and optionally Caddy for HTTPS. It is designed for developers who want:</p> <ul> <li>Fast, repeatable WordPress environments</li> <li>No global PHP/MySQL/Apache required</li> <li>Easy switching between projects</li> <li>Safe, isolated testing and development</li> </ul>"},{"location":"#creating-a-new-instance","title":"Creating a New Instance","text":"<p>Run:</p> <pre><code>wpod create\n</code></pre> <p>You will be prompted for an instance name, and whether to customize ports, credentials, and Caddy (reverse proxy) settings. WPOD checks for port conflicts and guides you through safe choices.</p> <p>Tips:</p> <ul> <li>If ports 80/443 are in use, WPOD will suggest disabling the built-in Caddy and using your own reverse proxy.</li> <li>You can always edit the generated <code>.env</code> and <code>docker-compose.yml</code> for advanced tweaks.</li> </ul> <p>Common errors:</p> <ul> <li>\"Port already in use\": Choose a different port or stop the conflicting service.</li> <li>\"Permission denied\": Ensure you have write access to the target directory.</li> </ul>"},{"location":"#instance-directory-structure","title":"Instance Directory Structure","text":"<p>Each instance contains:</p> <ul> <li><code>docker-compose.yml</code> \u2014 Defines all services (WordPress, DB, Adminer, Mailpit, Caddy)</li> <li><code>.env</code> \u2014 All environment variables for the stack</li> <li><code>config/Caddyfile</code> \u2014 Caddy reverse proxy config (used if Caddy is enabled)</li> <li><code>wp-content/</code> \u2014 Your themes, plugins, uploads</li> <li><code>wordpress/</code> \u2014 WordPress core files</li> <li><code>db/</code> \u2014 Database data (persisted in Docker volume)</li> <li><code>manage</code> \u2014 Instance management CLI</li> </ul>"},{"location":"#managing-an-instance","title":"Managing an Instance","text":"<p>From inside the instance directory, use the <code>manage</code> tool:</p> <ul> <li><code>./manage start</code> \u2014 Start all services in the background</li> <li><code>./manage stop</code> \u2014 Stop all services (data is preserved)</li> <li><code>./manage status</code> \u2014 Show which containers are running, with health info</li> <li><code>./manage update</code> \u2014 Pull latest images and restart</li> <li><code>./manage console</code> \u2014 Open a shell in the WordPress container</li> <li><code>./manage logs</code> \u2014 View logs for all services</li> <li><code>./manage install</code> \u2014 Run the WordPress install wizard (WP-CLI)</li> <li><code>./manage plugins</code> \u2014 Install, update, activate, or delete plugins interactively</li> <li><code>./manage themes</code> \u2014 Manage themes interactively</li> <li><code>./manage users</code> \u2014 List, create, or update users</li> <li><code>./manage db</code> \u2014 Import/export, backup/restore the database</li> <li><code>./manage mail</code> \u2014 Open Mailpit web UI (view outgoing emails)</li> <li><code>./manage admin</code> \u2014 Open WP Admin in your browser</li> <li><code>./manage open</code> \u2014 Open the site in your browser</li> </ul> <p>Suggestions:</p> <ul> <li>Use <code>./manage logs</code> if a service fails to start (look for MySQL or WordPress errors)</li> <li>Use <code>./manage db backup</code> before risky changes</li> <li>Use <code>./manage plugins</code> and <code>./manage themes</code> to avoid manual WP Admin work</li> </ul>"},{"location":"#caddy-https","title":"Caddy &amp; HTTPS","text":"<p>WPOD can run a Caddy container for local HTTPS, or you can use the generated Caddyfile with your own host-level Caddy/Nginx/Apache. During creation, you\u2019ll be prompted to enable/disable Caddy. If you use your own reverse proxy, point it to the WordPress container\u2019s port (see <code>.env</code>).</p> <p>Troubleshooting:</p> <ul> <li>If HTTPS doesn\u2019t work, check Caddy logs (<code>docker compose logs caddy</code>) or your host proxy config.</li> <li>For custom domains, add entries to your <code>/etc/hosts</code> or use a wildcard DNS for <code>.local</code> domains.</li> </ul>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Customizing Services: Edit <code>docker-compose.yml</code> to add Redis, Xdebug, or other services.</li> <li>Environment Variables: All service settings are in <code>.env</code>. Change ports, DB credentials, or WP debug flags here.</li> <li>Production Prep: Use <code>./manage prod-check</code> and <code>./manage prod-prep</code> for production readiness.</li> <li>Backups: Use <code>./manage db backup</code> and <code>./manage db restore</code> for safe migrations.</li> </ul>"},{"location":"#troubleshooting-faq","title":"Troubleshooting &amp; FAQ","text":"<ul> <li>Docker won\u2019t start containers: Check Docker Desktop is running, and you have enough free RAM/disk.</li> <li>Database connection errors: Wait a few seconds after <code>start</code>\u2014MySQL may take time to initialize.</li> <li>Permission issues on Linux: Use <code>./manage fix-perms</code> to set correct file permissions for <code>wp-content</code>.</li> <li>Mailpit not receiving mail: Check your WordPress SMTP settings and Mailpit logs.</li> </ul>"},{"location":"#best-practices","title":"Best Practices","text":"<ul> <li>Use a separate instance for each project/client.</li> <li>Regularly backup your database and <code>wp-content</code>.</li> <li>Use the CLI for all management tasks\u2014avoid manual container or file edits unless necessary.</li> <li>Keep WPOD and Docker images up to date (<code>wpod update</code>, <code>./manage update</code>).</li> </ul>"},{"location":"#more-documentation","title":"More Documentation","text":"<ul> <li>Getting Started: Step-by-step setup</li> <li>Usage Guide: Common workflows</li> <li>CLI Reference: All commands and options</li> <li>Caddy &amp; Reverse Proxy: HTTPS and domain setup</li> <li>Advanced Topics: Customization, production, and more</li> <li>FAQ: Answers to common questions</li> </ul> <p>WPOD is open source and welcomes issues, feedback, and contributions. For more, visit the GitHub repo.</p>"},{"location":"advanced/","title":"Advanced Usage","text":"<p>WPOD supports advanced workflows for power users:</p> <ul> <li>Custom Services: Edit <code>docker-compose.yml</code> to add Redis, Xdebug, or other services.</li> <li>Environment Variables: Tweak <code>.env</code> for ports, DB credentials, or debug flags.</li> <li>Production Prep: Use <code>./manage prod-check</code> and <code>./manage prod-prep</code> for production readiness.</li> <li>Backups: Use <code>./manage db backup</code> and <code>./manage db restore</code> for migrations.</li> <li>Manual Edits: You can manually edit config files for custom setups.</li> </ul> <p>Refer to the FAQ for troubleshooting and best practices.</p>"},{"location":"caddy/","title":"Caddy &amp; HTTPS","text":"<p>WPOD can run a Caddy container for local HTTPS support, making it easy to develop with SSL locally. You can enable or disable Caddy during instance creation. If you choose to enable it, WPOD will generate a <code>config/Caddyfile</code> for you and handle all the setup automatically.</p>"},{"location":"caddy/#how-caddy-works-in-wpod","title":"How Caddy Works in WPOD","text":"<ul> <li>Caddy Enabled: When enabled, Caddy acts as a reverse proxy, providing HTTPS for your local WordPress site. The configuration is stored in <code>config/Caddyfile</code> inside your instance directory. Caddy will automatically generate self-signed certificates for your <code>.local</code> domains.</li> <li>Custom Reverse Proxy: If you prefer to use your own Caddy, Nginx, or Apache setup, simply disable Caddy during instance creation. You can then use the generated <code>Caddyfile</code> as a template, or point your own reverse proxy to the WordPress container\u2019s HTTP port (see the <code>.env</code> file for the correct port).</li> </ul>"},{"location":"caddy/#custom-domains-and-local-https","title":"Custom Domains and Local HTTPS","text":"<ul> <li>WPOD supports custom domains for each instance (e.g., <code>myproject.local</code>).</li> <li>For local development, add your chosen domain(s) to your <code>/etc/hosts</code> file, mapping them to <code>127.0.0.1</code>.</li> <li>Caddy will serve your site over HTTPS at the custom domain.</li> <li>If you use a wildcard DNS service (like <code>nip.io</code> or <code>sslip.io</code>), you can avoid editing <code>/etc/hosts</code>.</li> </ul>"},{"location":"caddy/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If HTTPS fails, check Caddy logs:</li> </ul> <pre><code>docker compose logs caddy\n</code></pre> <ul> <li>Make sure the ports required by Caddy (usually 80 and 443) are not in use by other services. If they are, you can:</li> <li>Disable Caddy and use your own reverse proxy.</li> <li>Change the ports in <code>.env</code> and <code>docker-compose.yml</code>.</li> <li>For browser trust issues with self-signed certificates, you may need to accept the certificate manually in your browser.</li> <li>If you change domains or ports, restart the Caddy container to apply changes.</li> </ul>"},{"location":"caddy/#advanced-caddy-configuration","title":"Advanced Caddy Configuration","text":"<ul> <li>You can edit <code>config/Caddyfile</code> to add custom rules, redirects, or additional sites.</li> <li>For advanced HTTPS options (e.g., custom certificates, HTTP/2, etc.), refer to the Caddy documentation.</li> <li>If you use your own Caddy or another reverse proxy, ensure it forwards both HTTP and HTTPS traffic to the correct container port.</li> </ul> <p>See Advanced Usage for more customization tips and best practices.</p>"},{"location":"cli/","title":"CLI Reference","text":"<p>WPOD provides a CLI tool (<code>manage</code>) for instance management. Common commands include:</p> <ul> <li><code>./manage start</code> \u2014 Start all services</li> <li><code>./manage stop</code> \u2014 Stop all services</li> <li><code>./manage status</code> \u2014 Show running containers</li> <li><code>./manage update</code> \u2014 Update images and restart</li> <li><code>./manage console</code> \u2014 Shell into the WordPress container</li> <li><code>./manage logs</code> \u2014 View logs</li> <li><code>./manage install</code> \u2014 Run WordPress install wizard</li> <li><code>./manage plugins</code> \u2014 Manage plugins</li> <li><code>./manage themes</code> \u2014 Manage themes</li> <li><code>./manage users</code> \u2014 Manage users</li> <li><code>./manage db</code> \u2014 Database operations</li> <li><code>./manage mail</code> \u2014 Open Mailpit UI</li> <li><code>./manage admin</code> \u2014 Open WP Admin</li> <li><code>./manage open</code> \u2014 Open the site</li> </ul> <p>Run <code>./manage help</code> for a full list and details of each command.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Q: Docker won\u2019t start containers? A: Ensure Docker Desktop is running and you have enough free RAM/disk.</p> <p>Q: Database connection errors? A: Wait a few seconds after starting\u2014MySQL may take time to initialize.</p> <p>Q: Permission issues on Linux? A: Run <code>./manage fix-perms</code> to set correct permissions for <code>wp-content</code>.</p> <p>Q: Mailpit not receiving mail? A: Check your WordPress SMTP settings and Mailpit logs.</p> <p>Q: How do I back up my site? A: Use <code>./manage db backup</code> and copy your <code>wp-content</code> folder.</p> <p>See Best Practices for more tips.</p>"},{"location":"getting-started/","title":"Getting Started with WPOD","text":"<p>WPOD makes it easy to spin up local WordPress environments using Docker. Follow these steps to get started:</p> <ol> <li>Install Docker: Make sure Docker Desktop (or Docker Engine) is installed and running on your system.</li> <li>Download WPOD: Clone or download the WPOD repository.</li> <li>Create a New Instance:    <pre><code>wpod create\n</code></pre>    Follow the prompts to set up your first WordPress instance.</li> <li>Start Your Instance:    <pre><code>cd &lt;instance-directory&gt;\n./manage start\n</code></pre></li> <li>Access WordPress: Open your browser and go to the URL provided in the setup output.</li> </ol> <p>For more details, see the Usage and CLI sections.</p>"},{"location":"instances/","title":"Managing Instances","text":"<p>Each WordPress project is an \"instance\" managed by WPOD. Instances are fully isolated and have their own configuration, files, and database.</p>"},{"location":"instances/#creating-an-instance","title":"Creating an Instance","text":"<p>Run: <pre><code>wpod create\n</code></pre> Follow the prompts to set up a new instance.</p>"},{"location":"instances/#instance-structure","title":"Instance Structure","text":"<ul> <li><code>docker-compose.yml</code> \u2014 Service definitions</li> <li><code>.env</code> \u2014 Environment variables</li> <li><code>config/Caddyfile</code> \u2014 Caddy config (if enabled)</li> <li><code>wp-content/</code> \u2014 Themes, plugins, uploads</li> <li><code>wordpress/</code> \u2014 Core files</li> <li><code>db/</code> \u2014 Database data</li> <li><code>manage</code> \u2014 CLI tool</li> </ul>"},{"location":"instances/#managing-an-instance","title":"Managing an Instance","text":"<p>Use the <code>manage</code> tool inside the instance directory for all operations. See CLI for details.</p>"},{"location":"usage/","title":"Usage","text":"<p>WPOD is designed for easy management of multiple WordPress environments. Here are common workflows:</p> <ul> <li>Start/Stop Services:   <pre><code>./manage start\n./manage stop\n</code></pre></li> <li>Check Status:   <pre><code>./manage status\n</code></pre></li> <li>Update Images:   <pre><code>./manage update\n</code></pre></li> <li>Open WordPress Admin:   <pre><code>./manage admin\n</code></pre></li> <li>View Logs:   <pre><code>./manage logs\n</code></pre></li> </ul> <p>See CLI for all available commands. For advanced scenarios, refer to Advanced Usage.</p>"}]}